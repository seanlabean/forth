~html
~h2 Blorth ~/h2

~p Blorth is a custom Forth-based interpreter which enables the embedding of Forth commands within a text document, outputting HTML formatted files.
~+p
"Data is code." A powerful mantra in an era when data are considered only insofar as their ability to be consumed. Indeed, large language models have taken the exact opposite position: "Code is data". Forth enables orthogonal perspectives in other ways too, the stack-based nature of the language requires the programmer to be hyper-aware of the state of the processes they write. Efficiency and care become unspoken yet obvious requirements of Forth programs. Programmers exposed only to modern languages may never consider the implications of creating, populating, and modifying a dataframe Megabytes in size. Of course, this is isn't a blunder or a misgiving on their part, such nonchalant behavior is encouraged by every language of the 21st century. It makes life easier, and the resources available to even beginners have redefined "efficiency" and "considerate programming" so many times and to such extreme degress that they have become antonyms of their original selves from the mid 1900s.
~+p
A sample .bth file might look something like this:~/p
~pre
^html
^h2 A beautiful heading ^h2
^p A paragraph about Forth ^+p
Another paragraph about Forth ^/p
^href https://slewis.wiki link to my blog ^/href
^/html
~/pre
~p Where the ~cw ^ sign informs the Forth program to break out of the continuous character dump to the outfile buffer to execute the Forth word that follow. For example, the program will interpret ~cw ^href as the ~iw word ~cw href which itself is defined as outputing the string ~code "<a href=" ~/code as well as the following token, ~cw https://slewis.wiki in the example above, then closing the ~cw a element with ~cw ">" . The following text "link to my blog" is then read into the output buffer and the ~cw a element is closed with ~cw ^/href . ~+p

A curious self-referencial loop is taking place here, in that I am describing the program that parsed and wrote this text I am writing into the text you are reading which itself can be parsed by the same program. I don't really know what to make of that but it tickles me. To take it to the extreme, the following is the code necessary to process the .bth sample and is the same code that constructs this page. About 60 lines of Forth. ~/p

~pre
( configuration )
: srcfile	S" blorth.bth" ;
: outfile 	S" blorth.html" ;

( input buffer )
VARIABLE 'src ( address )
VARIABLE #src ( size of buffer )
VARIABLE 'out
VARIABLE #out

VARIABLE fh

: open      srcfile R/O OPEN-FILE THROW fh ! ;
: close     fh @ CLOSE-FILE THROW ;
: read      BEGIN HERE 4096 fh @ READ-FILE THROW DUP ALLOT 0= UNTIL ;
: gulp 	    open read close ;
: start     HERE 'src ! ;
: finish    HERE 'src @ - #src ! ;
: slurp     start gulp finish ;
: open      outfile R/W CREATE-FILE THROW fh ! ;
: write     'out @ #out @ fh @ WRITE-FILE THROW ;
: spew 	    open write close ;

( command dispatcher)
variable offset
variable 'token
variable #token

: addr      offset @ 'src @ + ;
: chr 	    addr C@ ;
: -ws 	    32 U> ;
: advance   1 offset +! ;
: seek 	    begin chr -ws WHILE advance REPEAT ;
: token     addr seek addr over - advance 2DUP #token ! 'token ! ;
: .token    'token @ #token @ TYPE ;
: error     CR CR .token -1 ABORT" Command was not found" ;
: command   token sfind IF EXECUTE ELSE error THEN ;

( vectored output )

: b-emit	C, ;
: b-type	BEGIN DUP WHILE OVER C@ EMIT 1 /string REPEAT 2DROP ;
: buffered	['] b-emit IS EMIT ['] b-type IS TYPE ;
: interactive	['] (EMIT) IS EMIT ['] (TYPE) IS TYPE ;
: start		HERE 'out ! buffered ;
: finish 	HERE 'out @ - #out ! interactive ; 

( process input buffer )

: rdrop     POSTPONE R> POSTPONE DROP ; IMMEDIATE
: call 	    >R ;
: entity    [CHAR] & emit type [CHAR] ; emit ;
: ===> 	    OVER = IF DROP R> call entity THEN rdrop ; ( custom syntax; most benefits of polymorphism )
: either&   [CHAR] & ===> S" amp" ; ( mapping symbols to entities )
: or<	    [CHAR] < ===> S" lt" ;
: or>	    [CHAR] > ===> S" gt" ;
: orESC     DUP [CHAR] ^ = IF DROP command RDROP EXIT THEN ;
: interpret chr advance either& or< or> orEsc ( else ) emit ;
: -end 	    offset @ #src @ U< ;
: format    0 offset ! BEGIN -end WHILE interpret REPEAT ;
: process   start format finish ;

( commands )
: html	    ." <!DOCTYPE html><head><title>" srcfile TYPE ." </title></head><body>" CR ;
: /html     ." </body></html>" ;
: p	    ." <p>" ;
: /p	    ." </p>" ;
: +p	    /p CR p ;
: h2	    ." <h2>" ;
: /h2	    ." </h2>" ;
: href	    ." <a href=" token TYPE ." >" ;
: /href	    ." </a>" ;

( kick off procedures )
: blorth         slurp process spew ;
blorth BYE
~/pre

~/html
